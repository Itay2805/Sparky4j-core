/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class platform_SPOpenGLRenderAPI */

#ifndef _Included_platform_SPOpenGLRenderAPI
#define _Included_platform_SPOpenGLRenderAPI
#ifdef __cplusplus
extern "C" {
#endif
	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createVertexArray
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_createVertexArray
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createBuffer
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_createBuffer
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createFramebuffer
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_createFramebuffer
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createRenderbuffer
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_createRenderbuffer
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    ceateVertexArrays
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_ceateVertexArrays
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createVertexBuffers
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_createVertexBuffers
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createFramebuffers
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_createFramebuffers
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createRenderbuffers
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_createRenderbuffers
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    bindVertexArray
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_bindVertexArray
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    bindBuffer
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_bindBuffer
		(JNIEnv *, jobject, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    bindFramebuffer
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_bindFramebuffer
		(JNIEnv *, jobject, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    bindRenderbuffer
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_bindRenderbuffer
		(JNIEnv *, jobject, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setBufferData
	* Signature: (IILjava/nio/ByteBuffer;I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setBufferData
		(JNIEnv *, jobject, jint, jint, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setBufferSubData
	* Signature: (IIILjava/nio/ByteBuffer;)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setBufferSubData
		(JNIEnv *, jobject, jint, jint, jint, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    getBufferPointer
	* Signature: (II)Ljava/nio/ByteBuffer;
	*/
	JNIEXPORT jobject JNICALL Java_platform_SPOpenGLRenderAPI_getBufferPointer
		(JNIEnv *, jobject, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    releaseBufferPointer
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_releaseBufferPointer
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    framebufferTexture2D
	* Signature: (IIIII)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_framebufferTexture2D
		(JNIEnv *, jobject, jint, jint, jint, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    framebufferRenderbuffer
	* Signature: (IIII)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_framebufferRenderbuffer
		(JNIEnv *, jobject, jint, jint, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    renderbufferStorage
	* Signature: (IIII)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_renderbufferStorage
		(JNIEnv *, jobject, jint, jint, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    getScreenBuffer
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_getScreenBuffer
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setViewport
	* Signature: (IIII)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setViewport
		(JNIEnv *, jobject, jint, jint, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    clear
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_clear
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setClearColor
	* Signature: (FFFF)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setClearColor
		(JNIEnv *, jobject, jfloat, jfloat, jfloat, jfloat);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createTexture
	* Signature: ()I
	*/
	JNIEXPORT jint JNICALL Java_platform_SPOpenGLRenderAPI_createTexture
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    createTextures
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_createTextures
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    bindTexture
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_bindTexture
		(JNIEnv *, jobject, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    unbindTexture
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_unbindTexture
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setTextureParamater
	* Signature: (III)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setTextureParamater
		(JNIEnv *, jobject, jint, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setTextureData
	* Signature: (IIIIII[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setTextureData
		(JNIEnv *, jobject, jint, jint, jint, jint, jint, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setActiveTexture
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setActiveTexture
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    unbindVertexArrays
	* Signature: ()V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_unbindVertexArrays
		(JNIEnv *, jobject);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    unbindBuffers
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_unbindBuffers
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    enableVertexAttribute
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_enableVertexAttribute
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    disableVertexAttribute
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_disableVertexAttribute
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    setVertexAttributePointer
	* Signature: (IIIZII)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_setVertexAttributePointer
		(JNIEnv *, jobject, jint, jint, jint, jboolean, jint, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeVertexArray
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeVertexArray
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeBuffer
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeBuffer
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeFramebuffer
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeFramebuffer
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeVertexArrays
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeVertexArrays
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeBuffers
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeBuffers
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeFramebuffers
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeFramebuffers
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeTexture
	* Signature: (I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeTexture
		(JNIEnv *, jobject, jint);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    freeTextures
	* Signature: (I[I)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_freeTextures
		(JNIEnv *, jobject, jint, jintArray);

	/*
	* Class:     platform_SPOpenGLRenderAPI
	* Method:    drawElements
	* Signature: (IIILjava/nio/ByteBuffer;)V
	*/
	JNIEXPORT void JNICALL Java_platform_SPOpenGLRenderAPI_drawElements
		(JNIEnv *, jobject, jint, jint, jint, jobject);

#ifdef __cplusplus
}
#endif
#endif
